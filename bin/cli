#!/usr/bin/env ruby

class CLI
   attr_accessor :user
   def initialize
      @user = nil
   end

   def run
      welcome_prompt
      initialize_user
      
      choice_prompt 
      choice = get_input(:choice) # 1 - Create short url from long; 2 - load long url from short 
      case choice
      when 1
         puts "Enter the long URL:"
         short_obj = generate_short_url
         puts "\nThe short URL for #{short_obj.long_url} is as follows:\n#{short_obj.short_url}"
      when 2
         begin
            puts "\nEnter the short URL:"
            short_obj = load_long_url
            puts "\nLoading #{short_obj.long_url} ..."
         rescue => e
            puts e.message
            puts "Re-enter the short URL? (y/n)"
            retry if get_input(:confirm) == "y"
         end
      end

      puts "\nHave a great day!"      
   end

   # ~~~ Input & Validation Functions ~~~

   def get_input(input_type)
      begin
         input = gets.chomp
         case input_type
         when :email
            validate_email(input)
         when :choice
            input = input.to_i
            validate_choice(input)
         when :confirm
            input = input.downcase
            validate_confirm(input)
         when :long_url
            validate_long_url(input)
         when :short_url
            validate_short_url(input)
         else
            raise RuntimeError("Invalid input type")
         end
      rescue ArgumentError => ae
         puts ae.message
         retry
      end
      input
   end

   def validate_email(email)
      raise ArgumentError, "Invalid email - please re-enter:" unless email.match?(/\S+@\S+(\.\S+){1,3}/)
   end

   def validate_choice(choice)
      raise ArgumentError, "Invalid choice - please re-enter:" unless choice == 1 || choice == 2
   end

   def validate_confirm(choice)
      raise ArgumentError, "Invalid choice - please re-enter:" unless choice == "y" || choice == "n"
   end

   def validate_long_url(long_url)
      raise ArgumentError, "Invalid URL - please re-enter:" unless long_url.match?(/\S+(\.\S+){1,3}/)
   end

   def validate_short_url(short_url)
      raise ArgumentError, "Invalid short URL; \nshort URLs consist of 20 alphanumeric characters. \nPlease re-enter:" unless short_url.match?(/\w{20}/)
   end

   # ~~~~~~~ Display Functions ~~~~~~~~

   def welcome_prompt
      puts "______________________________________________________"
      puts "_____________Command Line URL Shortener_______________"
      puts 
   end

   def choice_prompt
      puts "\nWhat would you like to do?"
      puts "1 - Create a new short url"
      puts "2 - Visit an existing short url"
   end

   # ~~~~~~~ Database Functions ~~~~~~~~

   def initialize_user
      begin
      puts "Please enter your user account email:"            
         user_email = get_input(:email)
         load_user(user_email) 
         puts "\nWelcome back!"     
      rescue ArgumentError => e
         puts e.message
         puts "Create new user with email #{user_email}? (y/n)"
         if get_input(:confirm) == "y"
            self.user = User.create(email: user_email)
         else
            retry
         end
      end
   end

   def load_user(email)
      self.user = User.find_by(email: email)
      raise ArgumentError, "User not found" if self.user.nil? 
   end

   def generate_short_url
      long_url = get_input(:long_url)
      short_url = ShortenedUrl.find_by(user_id: user.id, long_url: long_url)
      short_url ||= ShortenedUrl.generate_short_url!(user, long_url)
      short_url
   end

   def load_long_url
      short_url = get_input(:short_url)
      short_obj = ShortenedUrl.find_by(short_url: short_url, user_id: user.id)
      raise "No such URL found." if short_obj.nil?
      short_obj
   end 
   
end

